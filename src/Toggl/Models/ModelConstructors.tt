<#@ template language="C#" hostspecific="True"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
namespace Toggl.Models
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "");
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirst = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var className = Path.GetFileName(modelFile).Replace(".cs", "");
		if (className == "IEntity") continue;
		if (className == "PagedResult") continue;
		if (className + ".tt" == Path.GetFileName(Host.TemplateFile)) continue;
        if (!isFirst)
            WriteLine("");

        WriteLine($"    public partial class {className}");
        WriteLine( "    {");
		WriteLine( "        [System.Diagnostics.DebuggerStepThrough]");
        WriteLine($"        public {className}() {{ }}\r\n");
        WriteLine($"        public {className}({className} basedOn)");
        WriteLine( "        {");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            var matches = System.Text.RegularExpressions.Regex.Matches(line, 
				@"^\s*?public\s.+?\s(?'name'.*?)\s.+?get;.*?$");
			
			if (matches.Count > 0) {
				var propName = matches[0].Groups[1].Captures[0].Value;
				WriteLine($"            {propName} = basedOn.{propName};");
			}
        }

        WriteLine("        }");
        WriteLine("    }");

        isFirst = false;
    }
#>}