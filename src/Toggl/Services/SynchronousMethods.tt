<#@ template language="C#" hostspecific="True"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
using System;
using System.Collections.Generic;
using Toggl.Models;

namespace Toggl.Services
{
<#
	// TODO: Use Roslyn toolset instead. This template currently doesn't work with optional arguments.

    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "");
    var serviceFiles = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirstClass = true;

    foreach(var serviceFile in serviceFiles)
    {
        var className = Path.GetFileName(serviceFile).Replace(".cs", "");
		if (className + ".tt" == Path.GetFileName(Host.TemplateFile)) continue;
        if (!isFirstClass)
            WriteLine("");
		
		bool isFirstMethod = true;
        var text = File.ReadAllText(serviceFile);

		if (text.Contains("partial class"))
        {
			WriteLine($"    public partial class {className}");
			WriteLine( "    {");
		
			var matches = Regex.Matches(text, 
				@"^\s*?(?'accessmodifiers'.*?)\s+?async\s+?Task\s*<(?'returnValue'.+?)\s*>\s*?(?'name'\w+?)Async\s*
					(?'allargs'\(\s*(\S+?\s+(?'argname'\w+)(\s*=\*.+?)?[,)]\s*)*)$", 
				RegexOptions.ExplicitCapture | 
				RegexOptions.IgnorePatternWhitespace |
				RegexOptions.Multiline);
			
			foreach (Match match in matches)
			{
				var accessModifiers = match.Groups[1].Captures[0].Value;
				var returnValue = match.Groups[2].Captures[0].Value;
				var name = match.Groups[3].Captures[0].Value;
				var allArguments = match.Groups[4].Captures[0].Value;
				var callArguments = string.Join(", ", match.Groups[5].Captures.Cast<Capture>().Select(c => c.Value));
				if (!isFirstMethod) WriteLine("    ");
				WriteLine($"        /// <summary>Synchronous (blocking) version of <see cref=\"{name}Async\"/>.</summary>");
				WriteLine($"{accessModifiers} {returnValue} {name}{allArguments.Trim()}");
				WriteLine($"            => {name}Async({callArguments}).GetAwaiter().GetResult();");

				isFirstMethod = false;
			}

			WriteLine( "    }");
			isFirstClass = false;
        }
    }
#>}